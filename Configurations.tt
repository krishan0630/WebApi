<#@ output extension=".txt" #> 
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #> 
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #> 
<#@ import namespace="System.Linq" #> 
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ template language="C#v3.5" hostspecific="True" debug="true" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
	  

<# 
    Server server = new Server(new Microsoft.SqlServer.Management.Common.ServerConnection("localhost"));
    Database database =new Database(server,"Ultra"); 
    database.Refresh();    
    List<string> __savedOutputs = new List<string>();
   
    using (SqlConnection connection = new SqlConnection("data source=localhost;initial catalog=Ultra;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"))

    {
			
        SqlCommand command = new SqlCommand();
        command.Connection = connection;
        command.CommandType = CommandType.Text;
            
        DataTable values =   new DataTable();
			 
        command.CommandText = "Select  distinct [Name] from Config";

        SqlDataAdapter adapter =   new SqlDataAdapter(command);
        adapter.Fill(values);
				 
        CreateConfigValues(values,"Kians.Ultra.Entity");
        SaveOutput("ConfigsValues.generated.cs");	
        GenerateConfigurationMapping(values,"Kians.Ultra.Entity");
        SaveOutput("ConfigurationNew.generated.cs");	

    }
    DeleteOldOutputs();

     


 #>
<#+
    List<string> __savedOutputs = new List<string>();
    Engine __engine = new Engine();

    void DeleteOldOutputs()
    {
        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
        {
            if (!__savedOutputs.Contains(childProjectItem.Name))
                childProjectItem.Delete();
        }
    }
    
    
    void SaveOutput(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
    
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);		

        __savedOutputs.Add(outputFileName);
    }

	
    void SaveOutput(string outputFileName,string toFolderName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile) + "\\" + toFolderName ;
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        Directory.CreateDirectory(templateDirectory);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();
        __getTemplateProject().ProjectItems.AddFromFile(outputFilePath);
        __savedOutputs.Add(outputFileName);
    }
	
    void SaveOutputFromRoot(string outputFileName,string toFolderName)
    {
        // string templateDirectory = Path.GetDirectoryName(Host.TemplateFile).Replace(@"\Areas\PrivateAPI","") + "\\" + toFolderName ;
        string templateDirectory = Host.ResolveAssemblyReference("$(ProjectDir)").ToString() + toFolderName ;
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        Directory.CreateDirectory(templateDirectory);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();
        __getTemplateProject().ProjectItems.AddFromFile(outputFilePath);
        __savedOutputs.Add(outputFileName);
    }

    EnvDTE.ProjectItem __getTemplateProjectItem()
    {
        EnvDTE.Project dteProject = __getTemplateProject();

        IVsProject vsProject = __dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");
		
        return templateItem;
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    static IVsProject __dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }

    public void CreateConfigValues(DataTable table,string rootNamespace){#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Configuration;


namespace <#=        rootNamespace#>.Configuration
{
 
      public class ConfigValues
      {
      
       <#+        foreach (DataRow row in table.Rows) {
            string stateName = row["Name"].ToString().Replace(" ","");
        #>
       public string <#=            stateName #> { get; internal set; } 
       <#+        } #>
       
       }
}
<#+    }#>

<#+    public void GenerateConfigurationMapping(DataTable table,string rootNamespace){ #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Configuration;
using Kians.Ultra.Entity;
using Kians.Ultra.Repository.Interfaces;
using Kians.Ultra.Repository.Services;

namespace <#=        rootNamespace#>.Configuration
{
 
      public partial class ConfigurationNew
      {
 
        private ConfigValues _configValues = new ConfigValues();
        private readonly ICommonRepository<Config> _configRepositoryAdo;


        private static ConfigurationNew configurationNew;

        public ConfigurationNew()
            : this(new CommonRepository<Config>())
        {

        }
        public ConfigurationNew(ICommonRepository<Config> configRepositoryAdo)
        {
            _configRepositoryAdo = configRepositoryAdo;
        }

        public static ConfigValues Current
        {
            get
            {
                if (configurationNew == null)
                {
                    configurationNew = new ConfigurationNew();
                    configurationNew.Intialize();

                }
                return configurationNew._configValues;
            }
        }

        public  void Intialize()
        {
            var configs =   _configRepositoryAdo.GetAll();
   
            
            
           <#+        foreach (DataRow row in table.Rows) {
            string stateName = row["name"].ToString().Replace(" ","");
            #>
              var obj<#=            stateName #> = configs.Where(c => c.Name == "<#=            stateName #>").FirstOrDefault();
                      if(obj<#=            stateName #>  != null)
                      {
                          _configValues.<#=            stateName #> = obj<#=            stateName #> .ProductionValue;
                      }
           <#+        } #>
       
        
        }
}
}
<#+    } #>

