<#@ output extension=".log" #> 
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System" #>
 
 
<#+ public void GenerateEnums(string currentNamespace,Database database){#>

// <autogenerated>
//   This file was generated by Entity.tt and created by Ranjan Tharmakulasingam
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace <#= currentNamespace #>.Columns
{
	<#+ foreach (Table tableObj in database.Tables){#>
	public partial class <#= tableObj.Name #>Column
		{
			
		<#+ foreach (Column columnObj in tableObj.Columns){#>
			<#+ if(columnObj.Name == "ID" || columnObj.Name.EndsWith("GUID")){ #> public const string <#= columnObj.Name #> = "<#= columnObj.Name #>";
			<#+}else{ string columnName = columnObj.Name.Replace("ID","");#> public const string <#= columnName#> = "<#=columnName#>";<#+}#>		 
		<#+ } #>
			
		}
	<#+ } #>
}
 
<#+}#>

<#+ public void GenerateTableEnums(string currentNamespace,Database database){#>

// <autogenerated>
//   This file was generated by Entity.tt and created by Ranjan Tharmakulasingam
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated> 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace <#= currentNamespace #>
{	
	public class TableNames
	{
	<#+ foreach (Table tableObj in database.Tables){#>
		public const string <#= tableObj.Name #> = "<#= tableObj.Name #>";		 
	<#+ } #>
	
		public static List<string> GetAllTableList()
		{
			
				List<string> tableList = new List<string>();
				<#+ foreach (Table tableObj in database.Tables){#>
				tableList.Add("<#= tableObj.Name #>");				
				<#+ } #>
				return tableList;
			
		}
		
		public static Dictionary<string,string> GetTableAndForeignKeyMappings()
		{
			
				Dictionary<string,string> tableList = new Dictionary<string,string>();
				<#+ foreach (Table tableObj in database.Tables){#>
				 	  <#+ foreach (ForeignKey foreignKey in tableObj.ForeignKeys) { #>
					  tableList.Add("<#= foreignKey.Name #>","<#= tableObj.Name #>");
					  <#+ } #>
				<#+ } #>
				return tableList;
			
		}
	}
 
}
 
<#+}#>

<#+ public void CreateEntityBase(string currentNamespace){#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= currentNamespace #>
{   
	[Serializable]
    public abstract class EntityBase : IEntity
    {
    }
 
    public interface IEntity
    {
    }
}

<#+ } #>


<#+ public void CreateIStable(string currentNamespace){#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Madewell.Entity;

namespace <#= currentNamespace #>
{   
 
    public interface IStateable
    {
     WorkFlowStateType WorkFlowStateType { get; set; }
    }
}

<#+ } #>



<#+ public void CreateISoftDelete(string currentNamespace){#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= currentNamespace #>
{   
 
    public interface ISoftDelete
    {
		bool Deleted{get;set;}
    }
}

<#+ } #>


<#+ public void CreateRulesViolation(string currentNamespace){#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= currentNamespace #>
{
    public class RuleViolation
    {
        public string PropertyName { get; set; }
        public string PropertyValue { get; set; }
        public string ErrorMessage { get; set; }
		public string ObjectName {get;set;}
        public RuleViolation(string propertyName, string propertyValue, string errorMessage)
        {
            PropertyName = propertyName;
            PropertyValue = propertyValue;
            ErrorMessage = errorMessage;
        }
    }
 
    public interface IRuleEntity
    {
        List<RuleViolation> GetRuleViolations();
        bool HasErrors { get; }

        void Validate();
    }
}
<#+ } #>

